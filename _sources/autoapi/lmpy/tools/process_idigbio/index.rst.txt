:py:mod:`lmpy.tools.process_idigbio`
====================================

.. py:module:: lmpy.tools.process_idigbio

.. autoapi-nested-parse::

   Test script to process an iDigBio DWCA into something we can parse.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   lmpy.tools.process_idigbio.main
   lmpy.tools.process_idigbio.process_idb_dwca
   lmpy.tools.process_idigbio.process_meta_xml
   lmpy.tools.process_idigbio.test_dwca



Attributes
~~~~~~~~~~

.. autoapisummary::

   lmpy.tools.process_idigbio.CORE_TAG
   lmpy.tools.process_idigbio.DELIMITED_BY_ATT
   lmpy.tools.process_idigbio.DELIMITED_TERMS
   lmpy.tools.process_idigbio.EXTENSION_TAG
   lmpy.tools.process_idigbio.FIELD_TAG
   lmpy.tools.process_idigbio.FILES_TAG
   lmpy.tools.process_idigbio.ID_TAG
   lmpy.tools.process_idigbio.LOCATION_TAG
   lmpy.tools.process_idigbio.OCCURRENCE_ROW_TYPE
   lmpy.tools.process_idigbio.ROW_TYPE_ATT
   lmpy.tools.process_idigbio.TERM_TYPE_ATT


.. py:data:: CORE_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}core

   

.. py:data:: DELIMITED_BY_ATT
   :annotation: = delimitedBy

   

.. py:data:: DELIMITED_TERMS
   :annotation: = ['http://portal.idigbio.org/terms/flags', 'http://portal.idigbio.org/terms/recordIds']

   

.. py:data:: EXTENSION_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}extension

   

.. py:data:: FIELD_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}field

   

.. py:data:: FILES_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}files

   

.. py:data:: ID_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}id

   

.. py:data:: LOCATION_TAG
   :annotation: = {http://rs.tdwg.org/dwc/text/}location

   

.. py:data:: OCCURRENCE_ROW_TYPE
   :annotation: = http://rs.tdwg.org/dwc/terms/Occurrence

   

.. py:data:: ROW_TYPE_ATT
   :annotation: = rowType

   

.. py:data:: TERM_TYPE_ATT
   :annotation: = term

   

.. py:function:: main()

   Main method for script.


.. py:function:: process_idb_dwca(in_zipfile, out_zipfile)

   Process an idigbio zipfile.

   :param in_zipfile: File path to an input DWCA zip file.
   :type in_zipfile: str
   :param out_zipfile: File path to write the output DWCA zip file.
   :type out_zipfile: str


.. py:function:: process_meta_xml(meta_xml_contents)

   Process the contents of the meta.xml file.

   :param meta_xml_contents: String containing XML metadata information for a DWCA.
   :type meta_xml_contents: str

   :returns: The processed metadata XML as a string.
   :rtype: str


.. py:function:: test_dwca(dwca_filename)

   Test that a DWCA file can be processed.

   :param dwca_filename: The file path of a DarwinCore Archive to test.
   :type dwca_filename: str

   :raises ValueError: Raised if points returned is None.



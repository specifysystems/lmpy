:mod:`lmpy.data_preparation.layer_encoder`
==========================================

.. py:module:: lmpy.data_preparation.layer_encoder

.. autoapi-nested-parse::

   This module contains a class for encoding spatial layers into a Matrix.

   The 'LayerEncoder' class uses a shapegrid to generate a base matrix structure
   and then each layer is encoded as a new column (or columns) for the resulting
   encoded matrix.

   .. todo::

      Consider if we want to support hexagonal cells, if so, we will need to
          mask the resulting data windows and possibly change the minimum
          coverage calculation.

   .. note:: Data array is oriented at top left (min x, max y)



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lmpy.data_preparation.layer_encoder.LayerEncoder




.. class:: LayerEncoder(shapegrid_filename)


   Constructor for the layer encoder.

   :param shapegrid_filename: A file path for the shapegrid.
   :type shapegrid_filename: str

   .. method:: _encode_layer(self, window_func, encode_func, column_name, num_columns=1)

      Encodes the layer using the provided encoding function.

      :param window_func: A function that returns a window of array data for a
                          provided x, y pair.
      :param encode_func: A function that encodes a window of array data.
      :param column_name: The header name to use for the column in the encoded
                          matrix.
      :param num_columns: The number of columns that will be encoded by
                          'encode_func'.  This can be non-zero if we are testing for
                          multiple biogeographic hypotheses in a single vector layer for
                          example.

      :returns: A list of column headers for the newly encoded columns.
      :rtype: list


   .. method:: _get_window_function(data, layer_bbox, cell_size, num_cell_sides=4)
      :staticmethod:

      Gets a windowing function for the data.

      This function generates a function that will return a "window" of array
      data for a given (x, y) pair.

      :param data: A numpy array with data for a layer
      :param layer_bbox: The bounding box of the layer in the map units of the
                         layer.
      :param cell_size: Either a single value or a tuple with two values. If it
                        is a single value, it will be used for both x and y cell sizes.
                        If a tuple is provided, the first value will be used for the
                        size of each cell in the x dimension and the second will be
                        used for the size of the cell in the y dimension.
      :param num_cell_sides:
                             The number of sides each shapegrid cell has::
                                 4 -- square
                                 6 -- hexagon

      .. note::

         The origin (0, 0) of the data array should represent (min x, max y)
             for the layer.

      :returns: A function for processing a window of data.
      :rtype: Method

      .. todo:: CJ - Enable hexagonal windows by masking data.


   .. method:: _read_layer(self, layer_filename, resolution=None, bbox=None, nodata=DEFAULT_NODATA, event_field=None)

      Reads a layer for processing.

      :param layer_filename: The file path for the layer to read.
      :type layer_filename: str
      :param resolution: An optional resolution to use for the input data if
                         it is a vector layer.
      :type resolution: numeric
      :param bbox: An optional bounding box in the form
                   (min x, min y, max x, max y) to use if the layer is a vector layer.
      :type bbox: tuple
      :param nodata: An optional nodata value to use if the layer is a vector
                     layer.
      :type nodata: numeric
      :param event_field: If provided, use this field as the burn value for a
                          vector layer.
      :type event_field: str

      :returns:

                A tuple containing a window function for returning a portion of the
                    numpy array generated by the layer and the NODATA value to use with
                    this layer.
      :rtype: tuple


   .. method:: _read_raster_layer(self, raster_filename)

      Reads a raster layer for processing.

      :param raster_filename: The file path for the raster layer.

      :returns:

                A tuple containing a window function for returning a portion of the
                    numpy array generated by the layer and the NODATA value to use with
                    this layer.
      :rtype: tuple


   .. method:: _read_shapegrid(self, shapegrid_filename)

      Read the shapegrid.

      :param shapegrid_filename: The file location of the shapegrid.


   .. method:: _read_vector_layer(self, vector_filename, resolution=None, bbox=None, nodata=DEFAULT_NODATA, event_field=None)

      Reads a vector layer for processing.

      :param vector_filename: The vectorfile path for the layer to read.
      :param resolution: An optional resolution to use for the generated data
                         array for the layer.
      :param bbox: An optional bounding box in the form
                   (min x, min y, max x, max y) to use for the vector layer.  Will
                   use the shapegrid bounding box if not provided.
      :param nodata: An optional nodata value to use if the layer is a vector
                     layer.
      :param event_field: An optional shapefile attribute to use as the burn
                          value for each cell.  This should be numeric.

      :returns:

                A tuple containing a window function for returning a portion of the
                    numpy array generated by the layer, the NODATA value to use with this
                    layer, and a set of distinct events to be used for processing.
      :rtype: tuple


   .. method:: encode_biogeographic_hypothesis(self, layer_filename, column_name, min_coverage, resolution=None, bbox=None, nodata=DEFAULT_NODATA, event_field=None)

      Encodes a biogeographic hypothesis layer.

      Encodes a biogeographic hypothesis layer by creating a Helmert contrast
      column in the encoded matrix.

      :param layer_filename: The file location of the layer to encode.
      :param column_name: What to name this column in the encoded matrix.
      :param min_coverage: The minimum percentage of each data window that must
                           be covered.
      :param resolution: If the layer is a vector, optionally use this as the
                         resolution of the data grid.
      :param bbox: If the layer is a vector, optionally use this bounding box
                   for the data grid.
      :param nodata: If the layer is a vector, optionally use this as the data
                     grid nodata value.
      :param event_field: If the layer is a vector and contains multiple
                          hypotheses, use this field to separate the vector file.

      :returns: A list of column headers for the newly encoded columns.
      :rtype: list of str


   .. method:: encode_presence_absence(self, layer_filename, column_name, min_presence, max_presence, min_coverage, resolution=None, bbox=None, nodata=DEFAULT_NODATA, attribute_name=None)

      Encodes a distribution layer into a presence absence column.

      :param layer_filename: The file location of the layer to encode.
      :param column_name: What to name this column in the encoded matrix.
      :param min_presence: The minimum value that should be treated as presence.
      :param max_presence: The maximum value to be considered as present.
      :param min_coverage: The minimum percentage of each data window that must
                           be present to consider that cell present.
      :param resolution: If the layer is a vector, optionally use this as the
                         resolution of the data grid.
      :param bbox: If the layer is a vector, optionally use this bounding box
                   for the data grid.
      :param nodata: If the layer is a vector, optionally use this as the data
                     grid nodata value.
      :param attribute_name: If the layer is a vector, use this field to
                             determine presence.

      :returns: A list of column headers for the newly encoded columns.
      :rtype: list of str


   .. method:: encode_mean_value(self, layer_filename, column_name, resolution=None, bbox=None, nodata=DEFAULT_NODATA, attribute_name=None)

      Encodes a layer based on the mean value for each data window.

      :param layer_filename: The file location of the layer to encode.
      :param column_name: What to name this column in the encoded matrix.
      :param resolution: If the layer is a vector, optionally use this as the
                         resolution of the data grid.
      :param bbox: If the layer is a vector, optionally use this bounding box
                   for the data grid.
      :param nodata: If the layer is a vector, optionally use this as the data
                     grid nodata value.
      :param attribute_name: If the layer is a vector, use this field to
                             determine value.

      :returns: A list of column headers for the newly encoded columns
      :rtype: list of str


   .. method:: encode_largest_class(self, layer_filename, column_name, min_coverage, resolution=None, bbox=None, nodata=DEFAULT_NODATA, attribute_name=None)

      Encodes a layer based on the largest class in each data window.

      :param layer_filename: The file location of the layer to encode.
      :param column_name: What to name this column in the encoded matrix.
      :param min_coverage: The minimum percentage of each data window that must
                           be the covered by the largest class.
      :param resolution: If the layer is a vector, optionally use this as the
                         resolution of the data grid.
      :param bbox: If the layer is a vector, optionally use this bounding box
                   for the data grid.
      :param nodata: If the layer is a vector, optionally use this as the data
                     grid nodata value.
      :param attribute_name: If the layer is a vector, use this field to
                             determine largest class.

      :returns: A list of column headers for the newly encoded columns.
      :rtype: list of str


   .. method:: get_encoded_matrix(self)

      Returns the encoded matrix.

      :returns: The encoded matrix as a Matrix object
      :rtype: Matrix


   .. method:: get_geojson(self)

      Formats the encoded matrix as GeoJSON.

      :returns: A JSON dictionary for the encoded matrix.
      :rtype: dict




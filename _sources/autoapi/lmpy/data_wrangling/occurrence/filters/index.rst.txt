:py:mod:`lmpy.data_wrangling.occurrence.filters`
================================================

.. py:module:: lmpy.data_wrangling.occurrence.filters

.. autoapi-nested-parse::

   Module containing occurrence data wranglers for filtering points.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   lmpy.data_wrangling.occurrence.filters.get_attribute_filter
   lmpy.data_wrangling.occurrence.filters.get_bounding_box_filter
   lmpy.data_wrangling.occurrence.filters.get_decimal_precision_filter
   lmpy.data_wrangling.occurrence.filters.get_disjoint_geometries_filter
   lmpy.data_wrangling.occurrence.filters.get_intersect_geometries_filter
   lmpy.data_wrangling.occurrence.filters.get_minimum_points_filter
   lmpy.data_wrangling.occurrence.filters.get_spatial_index_filter
   lmpy.data_wrangling.occurrence.filters.get_unique_localities_filter



.. py:function:: get_attribute_filter(att_name, pass_condition)

   Get a filter function for checking a point attribute.

   :param att_name: The attribute of a point to check.
   :type att_name: str
   :param pass_condition: A function that takes a value and returns a boolean
                          indicating if it passes a condition.
   :type pass_condition: Method

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_bounding_box_filter(min_x, min_y, max_x, max_y)

   Get a filter function for the specified bounding box.

   :param min_x: The minimum 'x' value for the bounding box.
   :type min_x: numeric
   :param min_y: The minimum 'y' value for the bounding box.
   :type min_y: numeric
   :param max_x: The maximum 'x' value for the bounding box.
   :type max_x: numeric
   :param max_y: The maximum 'y' value for the bounding box.
   :type max_y: numeric

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_decimal_precision_filter(decimal_places)

   Get a filter function to remove points with inadequate precision.

   :param decimal_places: Only keep points with at least this many decimal
                          places of precision.
   :type decimal_places: int

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_disjoint_geometries_filter(geometry_wkts)

   Get a filter function for finding disjoint geometries.

   :param geometry_wkts: A list of geometry Well-Known Text strings
                         to check for intersection.
   :type geometry_wkts: list of str

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_intersect_geometries_filter(geometry_wkts)

   Get a filter function for intersecting the provided geometries.

   :param geometry_wkts: A list of geometry Well-Known Text strings
                         to check for intersection.
   :type geometry_wkts: list of str

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_minimum_points_filter(minimum_count)

   Get a filter that returns all points if a minimum number, else none.

   :param minimum_count: The minimum number of points in order to keep.
   :type minimum_count: int

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_spatial_index_filter(spatial_index, get_species_intersections_func, check_hit_func)

   Get a filter that uses a spatial index and logic to intersect hits.

   :param spatial_index: A spatial index or file path for
                         one to load.
   :type spatial_index: str or SpatialIndex
   :param get_species_intersections_func: A method for retrieving valid
                                          intersections for a species point.
   :type get_species_intersections_func: method
   :param check_hit_func: A method for checking a hit against the valid
                          hits for a species point.
   :type check_hit_func: method

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method


.. py:function:: get_unique_localities_filter()

   Get a filter that only retains points with unique localities.

   .. note:: Retains the first point with an unseen locality, drops the rest.

   :returns:

             A function that takes a list of points as input and returns a list of
                 points that pass that filter function.
   :rtype: Method



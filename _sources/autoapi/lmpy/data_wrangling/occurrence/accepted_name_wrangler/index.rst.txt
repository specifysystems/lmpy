:py:mod:`lmpy.data_wrangling.occurrence.accepted_name_wrangler`
===============================================================

.. py:module:: lmpy.data_wrangling.occurrence.accepted_name_wrangler

.. autoapi-nested-parse::

   Module containing occurrence data wranglers for modifying point data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lmpy.data_wrangling.occurrence.accepted_name_wrangler.AcceptedNameOccurrenceWrangler




.. py:class:: AcceptedNameOccurrenceWrangler(name_map=None, name_resolver=None, store_original_attribute=None, out_map_filename=None, map_write_interval=100, out_map_format='json', **params)

   Bases: :py:obj:`lmpy.data_wrangling.occurrence.base._OccurrenceDataWrangler`, :py:obj:`lmpy.data_wrangling.common.accepted_name_wrangler._AcceptedNameWrangler`

   Constructor for AcceptedNameModifier class.

   :param name_map: A map of original name to accepted name.
   :type name_map: dict or str
   :param name_resolver: If provided, use this method for getting new
                         accepted names.  If set to 'gbif', use GBIF name resolution.
   :type name_resolver: str or Method
   :param store_original_attribute: A new attribute to store the
                                    original taxon name.
   :type store_original_attribute: str or None
   :param out_map_filename: A file location to write the updated name map.
   :type out_map_filename: str
   :param map_write_interval: Update the name map output file after each set of
                              this many iterations.
   :type map_write_interval: int
   :param out_map_format: The format to write the names map (csv or json).
   :type out_map_format: str
   :param \*\*params: Keyword parameters to pass to _OccurrenceDataWrangler.
   :type \*\*params: dict

   .. py:attribute:: name
      :annotation: = AcceptedNameOccurrenceWrangler

      

   .. py:attribute:: version
      :annotation: = 1.0

      

   .. py:method:: _modify_point(self, point)

      Update taxon name if necessary.

      :param point: A point to modify.
      :type point: Point

      :returns: Modified (if needed) point and boolean if point was modified.
      :rtype: Point, bool


   .. py:method:: _pass_condition(self, point)

      Determine if a point has an accepted name.

      :param point: A point object to assess.
      :type point: Point

      :returns: An indication if the point passed the test.
      :rtype: bool




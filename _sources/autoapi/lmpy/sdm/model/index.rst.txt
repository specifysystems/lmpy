:py:mod:`lmpy.sdm.model`
========================

.. py:module:: lmpy.sdm.model

.. autoapi-nested-parse::

   Module containing tools for creating an SDM.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   lmpy.sdm.model._create_mask
   lmpy.sdm.model.create_maxent_layer_label
   lmpy.sdm.model.create_sdm
   lmpy.sdm.model.match_headers
   lmpy.sdm.model.project_sdm



Attributes
~~~~~~~~~~

.. autoapisummary::

   lmpy.sdm.model.script_name


.. py:function:: _create_mask(point_tuples, ecoregions_filename, env_dir, maxent_arguments, logger)


.. py:function:: create_maxent_layer_label(sdm_dir, label_name, touch_file=True)

   Return a filename to indicate a layer label for an SDM raster in the directory.

   :param sdm_dir: Path for output file, same as the dir for associated matrix input
   :type sdm_dir: str
   :param label_name: Name to use in matrix headers
   :type label_name: str
   :param touch_file: True to create the file
   :type touch_file: bool

   :returns: File signaling the
   :rtype: label_filename (str)

   .. note::

      This function assumes that only one SDM to be encoded will be in the same
          directory.


.. py:function:: create_sdm(min_points, csv_filename, env_dir, ecoregions_filename, work_dir, species_name, maxent_arguments=DEFAULT_MAXENT_OPTIONS, sp_key=Point.SPECIES_ATTRIBUTE, x_key=Point.X_ATTRIBUTE, y_key=Point.Y_ATTRIBUTE, create_mask=True, logger=None)

   Create an SDM, Maxent model if there are enough points, `rare species` if not.

   :param min_points: Number of points to determine whether to use Maxent or
                      rare-species modeling
   :type min_points: int
   :param csv_filename: input filename with species points
   :type csv_filename: str
   :param env_dir: directory containing environmental layers for model creation
   :type env_dir: str
   :param ecoregions_filename: Vector file containing ecoregions or other
                               environmental regions for masking in Maxent or intersecting with a convex
                               hull in rare-species model
   :type ecoregions_filename: str
   :param work_dir: directory for temporary modeling files
   :type work_dir: str
   :param maxent_arguments: space-separated values for Maxent parameters
   :type maxent_arguments: str
   :param species_name: name to use for the output model filename
   :type species_name: str
   :param sp_key: fieldname of the column containing the species name for grouping
   :type sp_key: str
   :param x_key: fieldname of the column containing the longitude coordinate
   :type x_key: str
   :param y_key: fieldname of the column containing the latitude coordinate
   :type y_key: str
   :param create_mask: flag indicating whether to create a mask for Maxent
   :type create_mask: bool
   :param logger: Logger for writing messages to console and/or file.
   :type logger: logging.logger

   :returns:

             either model raster filename for rare species model
                 or lambdas filename for Maxent
   :rtype: output_filename

       report (dict): dictionary containing relevant metadata about the model


.. py:function:: match_headers(mask_filename, tmp_mask_filename, template_layer_filename)

   Match headers with template layer.

   :param mask_filename: Input filename to update with headers
   :param tmp_mask_filename: Raster filename fromm which to copy the values above the 6th
   :param template_layer_filename: Layer filename from which to copy the first 6 values


.. py:function:: project_sdm(maxent_lambdas_file, env_dir, species_name, work_dir, logger=None)

   Project a Maxent model onto env. layers for a potential distribution map.

   .. note::

      create_sdm creates a raster projected distribution map using the same
      environmental layers as were used for modeling.  This function is intended to
      project an pre-created model onto different environmental layres.

   :param maxent_lambdas_file: input filename with Maxent rules
   :type maxent_lambdas_file: str
   :param env_dir: directory containing environmental layers for model projection
   :type env_dir: str
   :param work_dir: directory for temporary modeling files
   :type work_dir: str
   :param species_name: name to use for the output model filename
   :type species_name: str
   :param logger: Logger for writing messages to console and/or file.
   :type logger: logging.logger

   :returns: output filename
             report (dict): dictionary containing relevant metadata about the model
   :rtype: projection_raster_filename


.. py:data:: script_name
   

   

